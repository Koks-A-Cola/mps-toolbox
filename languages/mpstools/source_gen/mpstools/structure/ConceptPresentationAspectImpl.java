package mpstools.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_IHasDeleteButton;
  private ConceptPresentation props_IToggleableEditor;
  private ConceptPresentation props_IntlAlias;
  private ConceptPresentation props_IntlLanguage;
  private ConceptPresentation props_LocalizedKeyword;
  private ConceptPresentation props_MPSEditor_DeleteButton;
  private ConceptPresentation props_Translation;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.IHasDeleteButton:
        if (props_IHasDeleteButton == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IHasDeleteButton = cpb.create();
        }
        return props_IHasDeleteButton;
      case LanguageConceptSwitch.IToggleableEditor:
        if (props_IToggleableEditor == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IToggleableEditor = cpb.create();
        }
        return props_IToggleableEditor;
      case LanguageConceptSwitch.IntlAlias:
        if (props_IntlAlias == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("intl_alias");
          props_IntlAlias = cpb.create();
        }
        return props_IntlAlias;
      case LanguageConceptSwitch.IntlLanguage:
        if (props_IntlLanguage == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_IntlLanguage = cpb.create();
        }
        return props_IntlLanguage;
      case LanguageConceptSwitch.LocalizedKeyword:
        if (props_LocalizedKeyword == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x69a000cb56db442fL, 0xa085a182111bac09L, 0x144350812ec1179dL, 0x3581a114cbed7a78L, "language", "", "");
          props_LocalizedKeyword = cpb.create();
        }
        return props_LocalizedKeyword;
      case LanguageConceptSwitch.MPSEditor_DeleteButton:
        if (props_MPSEditor_DeleteButton == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("MPSEditor_DeleteButton");
          props_MPSEditor_DeleteButton = cpb.create();
        }
        return props_MPSEditor_DeleteButton;
      case LanguageConceptSwitch.Translation:
        if (props_Translation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("translation");
          props_Translation = cpb.create();
        }
        return props_Translation;
    }
    return null;
  }
}
